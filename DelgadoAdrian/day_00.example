#![allow(unused)]

use bstr::ByteSlice;
use itertools::Itertools;
use ndarray::{array, s, Array2};
use nom::{
    branch::alt,
    bytes::complete::{is_not, tag},
    character::complete::{alpha1, digit1, i64, newline, u32, u64},
    combinator::{map, value},
    multi::separated_list0,
    sequence::{delimited, preceded, terminated, tuple},
    IResult,
};
use petgraph::{
    algo::{all_simple_paths, toposort},
    prelude::*,
};

pub fn part1(input: &str) -> String {
    // for item in input.lines().map(|line| parse_line(line).unwrap().1) {
    //     ();
    // }
    // let input = input.trim_end();
    todo!()
}

pub fn part2(_input: &str) -> String {
    todo!()
}

// fn parse_line(input: &str) -> IResult<&str, _> {
//     let (rest, _) = /* parsing */(input)?;
//     Ok((rest, _))
// }

#[cfg(test)]
mod tests {
    use super::{part1, part2};

    const TEST_INPUT: &str = "\
";

    #[test]
    fn part1_works() {
        let output = 24000.to_string();

        assert_eq!(part1(TEST_INPUT), output);
    }

    // #[test]
    // fn part2_works() {
    //     let output = 45000.to_string();

    //     assert_eq!(part2(TEST_INPUT), output);
    // }
}
